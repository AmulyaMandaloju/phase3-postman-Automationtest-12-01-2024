{
	"info": {
		"_postman_id": "31861a4a-8557-4bf2-879e-7947867a7d37",
		"name": "Online Post APIs Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32292588",
		"_collection_link": "https://restless-comet-434355-1.postman.co/workspace/Online-Post-APIs-Test~ff3a0739-4f19-4b0d-a3c3-c7ce0f6c3902/collection/32292588-31861a4a-8557-4bf2-879e-7947867a7d37?action=share&source=collection_link&creator=32292588"
	},
	"item": [
		{
			"name": "Get Request",
			"item": [
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Posts by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Reponse should be a json \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(1);\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
									"});\r",
									"pm.test(\"Reponse should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData).to.have.property( \"userId\");\r",
									"    pm.expect(jsonData).to.have.property( \"id\");\r",
									"    pm.expect(jsonData).to.have.property( \"title\");\r",
									"    // check the properties exist & not null\r",
									"    pm.expect(jsonData.userId).to.not.be.null;\r",
									"    pm.expect(jsonData.userId).to.not.be.undefined;\r",
									"    // check the properties exist & not undefined.\r",
									"    pm.expect(jsonData.title).to.not.be.undefined;\r",
									"    pm.expect(jsonData.title).to.not.be.null;\r",
									"    // check the properties exist & not undefined.\r",
									"    pm.expect(jsonData.id).to.not.be.null;\r",
									"    pm.expect(jsonData.id).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments by post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1/comments",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments by post id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/comments",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post Request",
			"item": [
				{
					"name": "Update all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Reponse should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(101);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put Request",
			"item": [
				{
					"name": "Update posts id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Reponse should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"   \r",
									"});\r",
									"pm.test(\"Reponse should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData).to.have.property( \"id\");\r",
									"    // check the properties exist & not undefined.\r",
									"    pm.expect(jsonData.id).to.not.be.null;\r",
									"    pm.expect(jsonData.id).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Reponse should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(1);\r",
									"   pm.expect(jsonData.id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Reponse should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData).to.have.property( \"userId\");\r",
									"    pm.expect(jsonData).to.have.property( \"id\");\r",
									"    pm.expect(jsonData).to.have.property( \"body\");\r",
									"    // check the properties exist & not undefined.\r",
									"    pm.expect(jsonData.userId).to.not.be.null;\r",
									"    pm.expect(jsonData.userId).to.not.be.undefined;\r",
									"   \r",
									"    // check the properties exist & not undefined.\r",
									"    pm.expect(jsonData.id).to.not.be.null;\r",
									"    pm.expect(jsonData.id).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Request",
			"item": [
				{
					"name": "Delete by posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}